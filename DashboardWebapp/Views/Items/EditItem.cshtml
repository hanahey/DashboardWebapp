@model DashboardWebapp.Models.ItemViewModel
@{
    ViewBag.Title = "Edit Item";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @min = "1" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Measurement, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Measurement, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Measurement, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @min = "0.01" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Store, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Store, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Store, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TagIds, htmlAttributes: new { @class = "control-label col-md-4", @style = "text-align:left" })
        <div class="col-md-8" style="overflow-y:scroll;max-height:90px;max-width:295px">
            @for (var i = 0; i < Model.TagCollection.Count(); i++)
            {
                if (Model.TagIds.Contains(Model.TagCollection.ElementAt(i).Id))
                {
                    <input type="checkbox" value="@Model.TagCollection.ElementAt(i).Id" name="TagIds" checked="checked" /> @Model.TagCollection.ElementAt(i).Name
                }
                else
                {
                    <input type="checkbox" value="@Model.TagCollection.ElementAt(i).Id" name="TagIds" /> @Model.TagCollection.ElementAt(i).Name
                }
                <br />
            }
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-4 col-md-8">
            <input type="submit" value="Save" class="btn btn-success" />
        </div>
    </div>
</div>
    
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"
        type="text/javascript">
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"
        type="text/javascript">
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}